{"version":3,"sources":["assets/SpaceX-Logo.svg","App.js","reportWebVitals.js","index.js"],"names":["PAST_LAUNCHES","gql","App","useState","numLaunches","setNumLaunches","useQuery","variables","loading","error","data","style","color","backgroundColor","padding","fontFamily","onClick","src","logo","alt","height","launchesPast","map","launch","mission_name","Date","launch_date_local","toLocaleDateString","rocket","rocket_name","launch_site","site_name_long","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAe,MAA0B,wC,uBCKnCA,EAAgBC,cAAH,gRAmEJC,MApDf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACJC,EADI,KACSC,EADT,OAEoBC,mBAASN,EAAe,CACnDO,UAAW,CACPH,iBAFDI,EAFI,EAEJA,QAASC,EAFL,EAEKA,MAAOC,EAFZ,EAEYA,KAcvB,OAAIF,EACO,2CAGPC,EACO,8CAIP,sBAAKE,MAlBS,CACdC,MAAO,QACPC,gBAAiB,aACjBC,QAAS,OACTC,WAAY,SAcZ,UACI,sBAAKJ,MAbI,CACbG,QAAS,IAYL,UACI,wBAAQE,QAAS,kBAAMX,EAAe,IAAtC,oBACA,wBAAQW,QAAS,kBAAMX,EAAe,KAAtC,wBAEJ,+BACI,6BACI,qBAAKY,IAAKC,EAAMC,IAAI,SAASR,MAAO,CAACS,OAAQ,QAEhDV,EAAKW,aAAaC,KAAI,SAACC,GAAD,OACnB,+BACI,iCAASA,EAAOC,eAChB,+BACI,8CACiB,IACZ,IAAIC,KAAKF,EAAOG,mBAAmBC,wBAExC,0CAAaJ,EAAOK,OAAOC,eAC3B,+CAAkBN,EAAOO,YAAYC,uBARpCR,EAAOC,wBC3CrBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCARQ,EAAS,IAAIC,eAAa,CAC5BC,IAAK,mCACLC,MAAO,IAAIC,kBAGfC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5BlB,M","file":"static/js/main.87a4e5d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SpaceX-Logo.10aced87.svg\";","import logo from './assets/SpaceX-Logo.svg';\nimport './App.css';\nimport {gql, useQuery} from '@apollo/client';\nimport {useState} from 'react';\n\nconst PAST_LAUNCHES = gql`\n  query GetPastLaunces($numLaunches: Int!) {\n    launchesPast(limit: $numLaunches) {\n      mission_name\n      launch_date_local\n      launch_site {\n        site_name_long\n      }\n      rocket {\n        rocket_name\n      }\n    }\n  }\n`;\n\nfunction App() {\n    const [numLaunches, setNumLaunches] = useState(10);\n    const {loading, error, data} = useQuery(PAST_LAUNCHES, {\n        variables: {\n            numLaunches\n        },\n    });\n    const container = {\n        color: \"white\",\n        backgroundColor: \"DodgerBlue\",\n        padding: \"10px\",\n        fontFamily: \"Arial\"\n    };\n    const buttons =  {\n        padding: 20\n    }\n    if (loading) {\n        return <p>Loading...</p>;\n    }\n\n    if (error) {\n        return <p>Oh no, error!</p>;\n    }\n\n    return (\n        <div style={container}>\n            <div style={buttons}>\n                <button onClick={() => setNumLaunches(5)}>Show 5</button>\n                <button onClick={() => setNumLaunches(10)}>Show 10</button>\n            </div>\n            <ul>\n                <li>\n                    <img src={logo} alt=\"SpaceX\" style={{height: 50}}/>\n                </li>\n                {data.launchesPast.map((launch) => (\n                    <li key={launch.mission_name}>\n                        <strong>{launch.mission_name}</strong>\n                        <ul>\n                            <li>\n                                Launch Date:{' '}\n                                {new Date(launch.launch_date_local).toLocaleDateString()}\n                            </li>\n                            <li>Rocket: {launch.rocket.rocket_name}</li>\n                            <li>Launch Site: {launch.launch_site.site_name_long}</li>\n                        </ul>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n    uri: 'https://api.spacex.land/graphql/',\n    cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}